SOURCES:
https://beej.us/guide/bgnet/html/split-wide/system-calls-or-bust.html#socket 

https://man7.org/linux/man-pages/man2/socket.2.html

#include <sys/types.h>
#include <sys/socket.h>

int socket(int domain, int type, int protocol); 


______POLL________________
https://man7.org/linux/man-pages/man2/poll.2.html 

SYNOPSIS        
       #include <poll.h>
       int poll(struct pollfd *fds, nfds_t nfds, int timeout);

DESCRIPTION  

       poll()  waits for one of a   set of file descriptors to become ready to perform I/O. 

       The set of file descriptors to be monitored is specified in the
       fds argument, which is an array of structures of the following
       form:

           struct pollfd {
               int   fd;         /* file descriptor */
               short events;     /* requested events */
               short revents;    /* returned events */
           };

        fd = file descriptor  open file.  
        '-'  = corresponding events field is ignored + revents field = 0.  
        //(This provides an easy way of  ignoring a file descriptor for a single poll() call:
       //  simply set   the fd field to its bitwise complement.)

       "events"- input  = bit mask specifying 
       the  events the application is interested in for the     fd. 
        This field may be specified as zero,
         in which case the only  events that can be returned
          in revents are POLLHUP, POLLERR, and       POLLNVAL (see below).

       "revents" - output, filled by the kernel  with  actually occurred events.  
       The bits returned in   revents can include any of those specified in events, 
       or one of   the values POLLERR, POLLHUP, or POLLNVAL. 
        (These three bits are    meaningless in the events field,
         and will be set in the revents
       field whenever the corresponding condition is true.)

_____  short revents;    /* returned events */ ________

POLLIN      |There is data to read.     | => Accept or read from client
POLLHUP	    |Client disconnected    	|=> Close socket and clean up
POLLERR	    |Error on socket    	    | => Close and maybe log error
POLLNVAL	|Invalid socket (closed/..) | => Remove from _pollFds

____________ACCEPT()_____________

       int accept(int sockfd, struct sockaddr *_Nullable restrict addr,
                  socklen_t *_Nullable restrict addrlen);
https://man7.org/linux/man-pages/man2/accept.2.html

The accept() system call is used with connection-based socket  types (SOCK_STREAM, SOCK_SEQPACKET). 
It extracts the first   connection request on the queue of pending connections 
for the  listening socket, sockfd, creates a new connected socket, and
returns a new file descriptor referring to that socket.  The newly
created socket is not in the listening state.  The original socket
sockfd is unaffected by this call.


https://www.ibm.com/docs/pt-br/zos/2.4.0?topic=functions-accept-accept-new-connection-socket 
       Example
The following are two examples of the accept() call. In the first, the caller wishes to have the requester's address returned. In the second, the caller does not wish to have the requester's address returned.

int clientsocket;
int s;
struct sockaddr clientaddress;
int address_len;
int accept(int s, struct sockaddr *addr, int *address_len);
/* socket(), bind(), and listen() 
have been called */
/* EXAMPLE 1: I want the address now */
address_len = sizeof(clientaddress);
clientsocket = accept(s, &clientaddress, &address_len);



___STRUCT SOCKADDRESS___________
https://man7.org/linux/man-pages/man3/sockaddr.3type.html 

  Internet domain sockets
       #include <netinet/in.h>

       struct sockaddr_in {
           sa_family_t     sin_family;     /* AF_INET */
           in_port_t       sin_port;       /* Port number */
           struct in_addr  sin_addr;       /* IPv4 address */
       };

       socklen_t
              Describes the length of a socket address.  This is an
              integer type of at least 32 bits.



+----------------+-----------------------------------+-------------------------------+
| Command        | Description                       | Where to Handle               |
+----------------+-----------------------------------+-------------------------------+
| PASS           | Set connection password           | Server::handlePass()          |
| NICK           | Set nickname                      | Server::handleNick()          |
| USER           | Set username                      | Server::handleUser()          |
+----------------+-----------------------------------+-------------------------------+
| JOIN           | Join a channel                    | Server::handleJoin()          |
| PART           | Leave a channel                   | Server (optional)             |
| KICK           | Kick user from channel            | Server::handleKick()          |
| TOPIC          | Change or view channel topic      | Server::handleTopic()         |
| INVITE         | Invite user to channel            | Server::handleInvite()        |
| MODE           | Set channel/user modes            | Server::handleMode()          |
+----------------+-----------------------------------+-------------------------------+
| PRIVMSG        | Send private message to user/channel | Server::handlePrivateMessage() |
| NOTICE         | Send message without auto-reply   | Server (optional)             |
+----------------+-----------------------------------+-------------------------------+
| QUIT           | Client disconnects                | Server (cleanup logic)        |
| PING           | Server ping check                 | Server (send PONG reply)      |
+----------------+-----------------------------------+-------------------------------+
| WHO            | List users in channel             | Server (optional)             |
| NAMES          | List nicknames in channel         | Server (optional)             |
+----------------+-----------------------------------+-------------------------------+

+-----------+----------------------------+----------------------------------------------+
| Class     | Description                | Function Declaration                         |
+-----------+----------------------------+----------------------------------------------+
| Server    | Handle password for server | void handlePass(Client* client, const std::vector<std::string>& args); |
| Server    | Set/change client nickname | void handleNick(Client* client, const std::vector<std::string>& args); |
| Server    | Set username/real name     | void handleUser(Client* client, const std::vector<std::string>& args); |
| Server    | Join channel               | void handleJoin(Client* client, const std::vector<std::string>& args); |
| Server    | Send private or channel msg| void handlePrivateMessage(Client* client, const std::vector<std::string>& args); |
| Server    | Client disconnect          | void handleQuit(Client* client, const std::vector<std::string>& args); |
| Server    | Reply to ping              | void handlePing(Client* client, const std::vector<std::string>& args); |
+-----------+----------------------------+----------------------------------------------+

