01.07
Branch: feat/nick
SERVER:
added:
	const std::string _serverName;
	isNicknameInUse()
	Server::isValidNickname
	broadcast after change nick to  client self and to all channles where this client is member
CLIENT:
const std::vector<Channel*> &getChannels() const; // Get list of channels, where this client is a member
changed std::vector<std::string> _channels;  to std::vector<Channel*> _channels; 
added:
	getChannels()

30.06
Branch feat/nick-pass-auth
 - added replies.hpp/cpp

 run()
	-changed logic when client disconnected and error => removeClient()
	
Added in server.cpp/hpp
	-helper function for validation niick/password/channel
	-getClientByNickname
	-getChannelByName()
	- isChannelName()

WIP:
 NICK



29.06
branch server-client handling

[x] sendToClient()
 
 [x]removeClient(fd) properly. It only does:
    Close fd
    Erase from _clients
    Erase from _pollFds
	
[] Move accept() logic from run() to acceptNewClient()

[] Move read() logic from run() to handleClientInput()
[] Update run() to call these	

28.06
Branch: feat/nick-pass-auth
feat/ → feature work
fix/ → bugfix
test/ → testing logic

27.06
Branch: irc-run-logic

- Input buffering per client
	read() reads available data
	appendToReceivedData() adds it to _receivedData
	While hasCompleteCommandRN() returns true
		extractNextCmd() gets full line (up to \r\n)
		handleCommand() is called with that line

- Wrote: handleCommand()
	Extract command (first word)
	Convert command to uppercase (IRC commands are not case sensitive)
	Split other words as arguments
	Call right function based on command (PASS, NICK, USER, JOIN)

- Server:
	Uncommented function definitions for:
		handlePass()
		handleNick()
		handleUser()
		handleJoin()
		handlePrivateMessage()

- Full line (\r\n) detection works
	Multiple commands handled if sent together

- Command placeholders:
	For now, PASS/NICK/USER/JOIN just reply with "received" message
	PrivateMessage not implemented yet

- Added simple sendToClient() for sending responses

- runpp updated:
	Uses -q 1 for nc so it auto-exits after sending test commands
	Server starts, accepts client, sends basic responses, exits cleanly


26.06
Channels.hpp:
[ ] Alena: replaced hardcoded color defines with colors.hpp
[ ] Alena: Commented out incomplete function to allow project to compile

		//TODO (Alena): Function definition for 'Channel' not found.
		//Channel();// Default constructor
		
		// TODO (Alena): commented out, _limit is not declared in Channel.cpp, causes error C/C++(292)
		//Channel(const std::string& name); // Constructor with channel name
		
		//TODO (Alena): Function definition for '~Channel' not found.
		//~Channel();// Destructor

[] made tmp void for compiling:

	//TODO(Alena) : made tmp void for compiling ( unused parameter 'client')
	(void)client;



Channel.cpp
[ ]//Alena: commented out, "_limit" is not a nonstatic data member or base class of class "Channel"C/C++(292)
	//constructor with channel name
	//Channel::Channel(const std::string& name) : _name(name), _limit(0) {}

[ ] // Alena: added forward declaration Client class before use it
class Client;

[] 	//TODO(Alena) : made tmp return true for compiling ( unused parameter 'client')
    return true;


[] /*
TODO(Alena): commented out, because same function line 97 -115
   79 | bool Channel::hasMembers(Client* client) const{
      |               ^
src/Channel.cpp:56:15: note: previous definition is here
   56 | bool Channel::hasMembers(Client* client) const{
      |               ^
src/Channel.cpp:89:15: error: redefinition of 'isOperator'
   89 | bool Channel::isOperator(Client* client) const {
      |               ^
src/Channel.cpp:67:15: note: previous definition is here
   67 | bool Channel::isOperator(Client* client) const {
      |               


added  git actions. 
made compiling version
changed to_string to own function