TO TEST:
test:
irssi (original client)
test with nc


CHECK!!! 
JOIN	‚ùå No (only to others)	You use sendToChannelExcept() ‚úîÔ∏è
PRIVMSG	‚ùå No (sender doesn't need reply)	‚úîÔ∏è
KICK	‚úÖ Yes	Sender must also receive the KICK message
TOPIC	‚úÖ Yes	All members see the new topic
MODE	‚úÖ Yes	All members see mode change
PART	‚úÖ Yes	Sender and others see it
So sendToChannel() is useful for all of these.

TODO SERVER/ CLIENT/ CHANNEL /ELSE:


Pull remote main once	git pull origin main
Set tracking branch	git branch --set-upstream-to=origin/main

TODO: 20 mistakes ctrl+c server when  channel is opened

18.07

BRANCH: 'fix/channel-operator-quit-part'
	channel:
		add void makeOperator(Client *client);
		add delete channel after part quit last user


BRANCH: * test/channel-invite
	- fix send priv mesage
	- fix with sending msg bye msg by quit
	- fix :: in invite msg"
	- :: in priv msg was from getPrefix(0)

BRANCH test/channel
	in removeUser():
		- changed loInfo from Error for user quit from channel
		- add remove from _operators
		- add remove from _invited
	changed function(A was not receivin quit bye from B)
	void sendToChannelExcept(const std::string &message, const Client &clientExcluded, Server &server) const;

	[] a invites B, B received invitation with cursor on same line (musr \r\n)
		=> updated sendToClient() to add "/r/n" for each message
		=>deleted /r/n/ from all numeric replies (while added to sendToClient centralized") 

	[] 10 ERROR WHILE TESTIN QUIT WITH MESSAGE. BUT only one time (strange)
		==1116195== ERROR SUMMARY: 10 errors from 10 contexts (suppressed: 0 from 0)


BRANCH: fix/handle-quit-inform-all-in-channel
	[x] bag: user B quit : bye! (quit with message, but in channel nobody receive message bye!)
	[x] bag: sever send logError and not logInfo
	[x] if (*it)


BRANCH: fix/channel-remove-user
	return after log-> prevent delete user

BRANCH: fix/handle-join
	add;
		removeInvited(int fd)
		delete after invite is used

BRANCH: fix/handle-invite
	 replyErr...() calls are not sent via server.sendToClient(...)

	- Invitation should be based on nickname, not file descriptor
	- You don‚Äôt check whether the target client actually exists
	- Message to the inviter and invitee is missing (RFC requires it)
	- The broadcast message "has invited a user" is not in IRC format
	- IRC INVITE command format
		INVITE <nickname> <channel>
		wrongly using a file descriptor (fd) instead of the nickname.
		done:
			std::string targetNick = params[0];        //  <nickname> first
    	std::string channelName = params[1];       // <channel> is second

	-add replyRpl341Inviting()
	- add Client* getClientByNick(const std::string &nickname) const;


BRANCH: * fix/handle-key-send-all
	changed the key-setting logic to broadcast the MODE +k message to all channel members (including the operator), making it IRC-compliant.
	Check if the params vector has at least 2 elements (channel name and key).
	Validate that the channel name is correctly formatted using isChannelName().
	Retrieve the channel using server.getChannel().
	Verify that the channel exists; otherwise, sent 403 ERR_NOSUCHCHANNEL.
	Checke if the client is an operator in the channel; otherwise, sent 482 ERR_CHANOPRIVSNEEDED.
	Set the channel key using channel->setKey(key), storing it internally.
	Sent an IRC-formatted MODE +k :key message to all channel members using sendToChannelAll(...) instead of sendToChannelExcept(...).
	Logg the change using logChannelInfo(...), clearly showing the key mode was set by the user.``

17.07



BRANCH: "fix/handle-topic
	- add to numeric reply send() from server to client


    [x]Topic change is not limited to operators in all cases
    According to the IRC spec and MODE +t, only when the +t mode is set, operators can change the topic. Otherwise, any member can.

    [x]You're not checking if the client is in the channel
    Even regular users should be in the channel to view or change topic.

    [x]You're not sending the proper IRC TOPIC message to the channel
    Format: :<nick> TOPIC <channel> :<new_topic>

    []No support for topic queries
    TOPIC <channel> (without a second param) is used to view the topic.

ADD:
	[x] if (!channel->hasMembers(&client))
	[x]  if (params.size() == 1)
	[x] replyRpl331NoTopic(
	[x] 
	[x] channel->isTopicLocked() &&
	[x]   notify all, not except 
		channel->sendToChannelAll(msg, server);								   // requires sendToChannelAll(msg, server) to be implemented
	 wrong: channel->sendToChannelExcept("Topic changed to: " + newTopic, client); // Notify other members


BRANCH:
	Fix
	params.size() < 3	 Invalid for standard IRC MODE command. The command can be just MODE #chan (to view) or MODE #chan +i (to set). The third parameter (true) is not standard.
	params[2] == "true"	 Not valid in IRC. You should use +i, -t, +k, etc. inside params[1]
	sendToChannelExcept(...)	 Kicks, mode changes, etc. should go to all, including the one making the change.
	"Mode 'x' has been enabled"	 This is not proper IRC format. The correct message is:
	:<prefix> MODE <channel> <+mode> [value]
	add getModes()
	moved from top if (params.size() < 2) => if the client does MODE #channel (to query), which is valid with 1 param, it gets wrongly rejected.
	replyRpl324ChannelMode(server.getServerName(), client.getNickname(), channelName, currentModes));
	add  if (params.empty()) instead if (params.size() < 2)





BRANCH: "fix/handle-ick" //kick :) 
	- add to numeric reply send() from server to client
	- add validation channel name
	- changed send standard MODE message to irc format
	- For the KICK command, the kicker must also receive the KICK message.
	
	channel :
		add :
			void Channel::sendToChannelAll(const std::string &message, Server &server)
	

BRANCH: "fix/handle-key" 
	- add to numeric reply send() from server to client
	- add validation channel name
	- changed send standard MODE message to irc format


BRANCH: "refactor/separate-key-commands" 
	separated key from commandsChannel

BRANCH: "refactor/separate-kick-commands" 
	separated kick from commandsChannel

BRANCH: "refactor/separate-invite-commands"l 
	separated invite from commandsChannel

BRANCH: refactor/separate-mode-from-commands-channel 
	separated mode from commandsChannel

BRANCH: refactor/separate-topic 
	separated topic from commandsChannel


Branch:
refactor/separate-topic-from-commands-channel

BRANCH: fix/handle-part
	[x]moved handlePart from commandsChannel  to  part.cpp
	[x] updated handlePart: sends proper IRC-format PART message to client and channel,
	[x]add error replies using sendToClient(), and removes redundant or invalid output format.

changed:
		[] rnumeric replies are not send 
________________________________________

BRUNCH: fix/handlejoin-replies-modes
	-deleted 46! git branches
			% git branch -r | wc -l                                              
			46
			% for branch in $(git branch -r | grep -v "origin/main" | sed 's/origin\///'); do
			git push origin --delete "$branch"
			done

[] Second PASS after registration 2 tiems pass from same person
		must:
			According to RFC and common practice, you cannot send PASS after registration. This must be rejected with:

			:ircserv 462 n :You may not reregister
join.cpp:
	[x] send() to client, no just  replie with numeric isValidUsername
		    function:void Server::sendToClient(int fd, const std::string &message)
	    	
			server.sendToClient(
        client.getFd(),
           replyErr473InviteOnlyChan(server.getServerName(), client.getNickname(), channelName));

			from:	
        	replyErr473InviteOnlyChan(server.getServerName(), channelName);

	[x] added irc-format notify: :n!user@host JOIN #channel
	// send irc formt  JOIN message to other channel members
    channel->sendToChannelExcept(
        ":" + client.getPrefix() + " JOIN " + channelName,
        client);
	[x] changed 473 for irc standart: <server> 473 <nick> <channel> :Cannot join channel (+i)

	[x] added required: replyRplNamReply (353)
	[x] added required: replyRplEndOfNames (366)




BRUNCH: git branch -m fix-user-realname-channel-pass
	- rejected the USER command if the realname is missing or empty after :.
	- prevented a user from joining the same channel twice.
	- blocked the PASS command if the client is already registered.



BRUNCH: fix/handleUSer
	[x] fix accept without realname, but welcome
		user n 0 * : 
		:ircserv 001 n :Welcome to the Internet Relay Network n!n@127.0.0.1


BRUNCh: fix/channel-name-validation 
server.cpp
	 changed logic to check is channel name

join.cpp:
	separated join  to join.cpp form commandsChannel.cpp for easier work with test/refactoring
	Fixed is channel name + added new numeric reply
			 join a
			:ircserv 476 n a :Bad Channel Mask

			ServerüéüÔ∏èü§ñ: Received command from client fd 4: join a


replies.cpp:
	add: replyErr476BadChanMask for an invalid channel name

utils.cpp
	updated welcome message


TESTCASES:
	[]JOIN 1 
		must: JOIN 1
				:ircserv 476 testuser 1 :Invalid channel name


16.07:


	Branch "feature/shutdown-cleanup"
	add:
		DESTRUCTORS update in client and chaneel.
		add full cleaning in server destructor
			Client* c = new Client(...)	delete c somewhere (usually in shutdown or destructor)
			int fd = socket(...)	close(fd)
			fcntl(fd, F_SETFL, ...)	close(fd) when done
			std::map<int, Client*>	loop and delete all pointers
			std::map<std::string, Channel*>	same ‚Äî delete channels
	Channel:
	/*
	disabled copy constructor, operator=
		Copying and assignment are disabled for this class.
		IRC objects must be unique and should never be copied.

	[]segm fold by JOIN
SERVER:
	removeClinetFromALLChannels():
		add NULL check
		used copy instead original

Branch: refactor/commands-loggs
	-movved logs from classes to utils.cpp to use it in functions outside classes

	Client: deleted <<operator in Server
	- moved commands.cpp(from /src to /cmd)
	-renamed /commands/commands.cpp to /commands/commandsChannel.cpp
	- deleted empty files for commands
	- added  class Channel; to  commands.hpp
	- organized commands.hpp
	- added loginfo to server for registering client
	- 
	- 

Branch "fix/segfault-join"
 handleJoin():
		- added  after all numeric replies "return;"
		- added get the just-created channel. Chanell was NUll(segmfault)
		if(!channel){
			server.addChannel(channelName, client); 
			logChannelInfo( "Channel " + channelName +" created by " + client.getNickname());
			channel = server.getChannel(channelName); // Alena: added get the just-created channel
		}
		-added operator=first user:
		//  first user becomes operator
		channel->addOperator(client.getFd());
		logChannelInfo("User " + client.getNickname() + " granted operator status.");
		-added additional check:
				//  check in case if smth goes wrong
				if (!channel)
				{
					logChannelError("JOIN failed: could not get channel " + channelName);
					return;
				}
		- client.joinChannel(channel); //  add channel to client's list
		-fixef rejectin privmsg, because user was added 2 times in channel(Channel(name, creator) + channel->addUser(...);)
		- fixed adding same client two times with: if (!channel->hasMembers(&client))

BRANCH:		fix/channel-commands

		1. PROBLEM:
			
		  	[] nc -C 127.0.0.1 6667
			PASS p
			JOIN a

			
			BUT server accept not registered client!
				ServerüéüÔ∏èü§ñ: New client connected on fd 4 (127.0.0.1)
				ServerüéüÔ∏èü§ñ: Received command from client fd 4: PASS p
				ServerüéüÔ∏èü§ñ: Received command from client fd 4: JOIN a
				Channelüé™üí¨: Client added to channel: 
				ServerüéüÔ∏èü§ñ: Created channel a by user 
				Channelüé™üí¨: Channel a created by 
				Channelüé™üí¨: Client added as operator: 4
				Channelüé™üí¨: User  is  operator(creates channel).
				Channelüé™üí¨: User already in channel
		2.PROBLEM : user addd 2 times => problem in Channel:handleJoin()
				User already in channel

		3.Problem. In server teminal: ctrlC, but Client terminal is wrking!

		[X]4.problem:
		server closed, but client not:(
			 nc -C 127.0.0.1 6667
			NOTICE * : Server is shutting down now			//The fd was closed successfully by your server. 
			clear
			nc: write failed (0/2): Broken pipe
		FIX: not a problem: =>
			nc: write failed (0/2): Broken pipe
			=> that confirms the socket is fully closed on the server side
			nc is a simple line-based client ‚Äî it doesn‚Äôt auto-quit on EOF unless it receives nothing.
			You cannot force nc to quit remotely (only close the connection).

commandsChannel.cpp
	add:
		-check if not registered user=> dont allow join channel

registration.cpp:
	updated loServerinfo for welcome message

Client:
add: function for get prefix + _nickname + "!" + _username + "@" + _host;



15.07
Branch: "feature/signal-handling"
- handle SIGINT (Ctrl-C): clean up + shut down
- ignore SIGPIPE to prevent crash on writing to disconnected clients.
Global shutdown flag or Server pointer 
- handle_sigint() 

-signal(SIGINT, ...)

-signal(SIGPIPE, SIG_IGN)

Update Server::run() to respect shutdown
void Server::shutdown();  // Close all client sockets, set _running = false
Server:
add:
	bool _runningMainLoop for main loop
changed:
	RUN():
		main loop in run(0 for handling signals)
		moved incrementng logik pollFdIndex++  from handleClientInput()
handleClientInput():
	pollFdIndex++ removed from function . Logic in one place = >inside run, not this functio
[]Add handle signals*ctrl+c, ctrl+D
[]change logik for in handle client input(move out pollfd)
	



14.07
Brunch: feature/quit
 add:
	quit()

Branch: "fix/registration-order" 	
	registration.cpp:
registration.cpp
	changed: 
	parsing message for user: now realname can have many names with spaces
	add correct order: PASS->NICK>USERo:
				NICK missingPass
				:ircserv 451 NICK :You have not registered
				PASS abc
				NICK aaa
				USER myuser 0 * :Real Me
				:ircserv 001 aaa :Welcome to the Internet Relay Network aaa!myuser@127.0.0.1

Branch feature/signals:

 

12.07
Branch: feature/server-channel-handling

[] colors	
	changed:
		emoji 
		added colors already + need RST only
[] 	Server:
	   add:
	   		removeChannel();
			removeClientFromAllChannels();


Branch: feature/welcome-2-cIRCus
makefile:
add:
	mesage how to start programm
main:
add:
	printWelcomeMessage()


09.07
Server:
	add:
		getChannel()
Client: 
	added:
		isInChannel()
privmsg:
	add:
		 handlePrivateMessage
Server:
	changed:
		// Alena: renamed from broadCastMessage(const std::string &message, int excludeFd) const
		//        to sendToChannelExcept(const std::string &message, const Client &clientExcluded) const
		//        for clarity+common purpose.

		//Alena: changed multiple // before function to /* blockcomment */ for more clean and readable

08.07
Branch: refactor/handle-command
handleClientInput:
	added all commands to handle for client/channel/server

Branch: "feature/privmsg-notice"

TODO:
commands;
	added numeric replies 411,412
private message:

notice:




07.07
replyRpl001Welcome
Server:
	replyRpl001Welcome
	ping-pong
add:
	handlePing()
	void sendToClient(int fd, const std::string &message);
    void sendPong(Client &client, const std::string &message);
    void sendWelcome(Client &client);
	update : void handleUser(Server &server, Client &client, const std::vector<std::string> &params)
DONE:
GIT BRANCH: "feature/ping-pong"
  - handlePing()
  - sendPong()

GIT BRANCH: "feature/welcome"  
in registration.cpp:
 add check if registered 
 add send welcome
 Client:
	added:
	std::string _host;
	getHost()
	get ip 
	21:21 -!- Unknown command: CAP
	CAP -IRC Capability Negotiation.Need ignore

	changed:
	//for welocme message:
	Client(int fd); to 
	Client(int fd, const std::string &host);
	put Client() in private. Only creating with fd and host
	
	21:21 -!- Irssi: Connection to localhost established


04.07
DONE:
	made a new folder called commands
	took all the command functions (like handlePass, handleNick, etc.) out of the big Server and Client files
	put each command into its own small .cpp files inside the commands folder
	made the project look cleaner and easier to understand
	cChanged the functions so they get the Server as input when they need it
	fixed the code so things like sendToClient and getServerName still work after moving the functions
	

03.07

Server:
	changed:
	  moved some Orthodox Canonical Form to private (Server objects are non-copyable in real-world servers)

	added:
		handleUser()
		client->setHasProvidedPass(true);
		client->setHasProvidedNick(true);
		isValidUsername()


Client:
	changed:
		removed bool _isRegistered to isRegistered() inside function
		moved  some Orthodox Canonical Form to private (Client objects are non-copyable in real-world servers)

	added:
	std::string _userModes; //for handleUser pararmeter. Dont need then to check according subject

utils.cpp/hpp 
	created and moved there :
		check pass(server and client)
		intToString()


02.07
Branch: feat/nick
SERVER:
added:
handleUser()	
	const std::string _serverName;
	isNicknameInUse()
	isValidNickname()
	broadcast after change nick to  client self and to all channles where this client is member

changed:
	moved constructors to private, because only 1 server according to subject
	made isValid password static to check also server subject
	deleted operator<<(need debug only)
	changed check arguments in main, organized

CLIENT:
const std::vector<Channel*> &getChannels() const; // Get list of channels, where this client is a member
changed std::vector<std::string> _channels;  to std::vector<Channel*> _channels; 
added:
	getChannels()
	//For correct registration steps (PASS, NICK, USER), sends welcome messages.
	bool _hasProvidedPass; + getters/setters
	bool _hasProvidedNick; + getters/setters
	bool _hasProvidedUser;+ getters/setters
	 std::string _userModes;  + getters/add
	 std::string _realname;  + getters/setters


30.06
Branch feat/nick-pass-auth
 - added replies.hpp/cpp

 run()
	-changed logic when client disconnected and error => removeClient()
	
Added in server.cpp/hpp
	-helper function for validation niick/password/channel
	-getClientByNickname
	-getChannelByName()
	- isChannelName()

WIP:
 NICK



29.06
branch server-client handling

[x] sendToClient()
 
 [x]removeClient(fd) properly. It only does:
    Close fd
    Erase from _clients
    Erase from _pollFds
	
[] Move accept() logic from run() to acceptNewClient()

[] Move read() logic from run() to handleClientInput()
[] Update run() to call these	

28.06
Branch: feat/nick-pass-auth
feat/ ‚Üí feature work
fix/ ‚Üí bugfix
test/ ‚Üí testing logic

27.06
Branch: irc-run-logic

- Input buffering per client
	read() reads available data
	appendToReceivedData() adds it to _receivedData
	While hasCompleteCommandRN() returns true
		extractNextCmd() gets full line (up to \r\n)
		handleCommand() is called with that line

- Wrote: handleCommand()
	Extract command (first word)
	Convert command to uppercase (IRC commands are not case sensitive)
	Split other words as arguments
	Call right function based on command (PASS, NICK, USER, JOIN)

- Server:
	Uncommented function definitions for:
		handlePass()
		handleNick()
		handleUser()
		handleJoin()
		handlePrivateMessage()

- Full line (\r\n) detection works
	Multiple commands handled if sent together

- Command placeholders:
	For now, PASS/NICK/USER/JOIN just reply with "received" message
	PrivateMessage not implemented yet

- Added simple sendToClient() for sending responses

- runpp updated:
	Uses -q 1 for nc so it auto-exits after sending test commands
	Server starts, accepts client, sends basic responses, exits cleanly


26.06
Channels.hpp:
[ ] Alena: replaced hardcoded color defines with colors.hpp
[ ] Alena: Commented out incomplete function to allow project to compile

		//TODO (Alena): Function definition for 'Channel' not found.
		//Channel();// Default constructor
		
		// TODO (Alena): commented out, _limit is not declared in Channel.cpp, causes error C/C++(292)
		//Channel(const std::string& name); // Constructor with channel name
		
		//TODO (Alena): Function definition for '~Channel' not found.
		//~Channel();// Destructor

[] made tmp void for compiling:

	//TODO(Alena) : made tmp void for compiling ( unused parameter 'client')
	(void)client;



Channel.cpp
[ ]//Alena: commented out, "_limit" is not a nonstatic data member or base class of class "Channel"C/C++(292)
	//constructor with channel name
	//Channel::Channel(const std::string& name) : _name(name), _limit(0) {}

[ ] // Alena: added forward declaration Client class before use it
class Client;

[] 	//TODO(Alena) : made tmp return true for compiling ( unused parameter 'client')
    return true;


[] /*
TODO(Alena): commented out, because same function line 97 -115
   79 | bool Channel::hasMembers(Client* client) const{
      |               ^
src/Channel.cpp:56:15: note: previous definition is here
   56 | bool Channel::hasMembers(Client* client) const{
      |               ^
src/Channel.cpp:89:15: error: redefinition of 'isOperator'
   89 | bool Channel::isOperator(Client* client) const {
      |               ^
src/Channel.cpp:67:15: note: previous definition is here
   67 | bool Channel::isOperator(Client* client) const {
      |               


added  git actions. 
made compiling version
changed to_string to own function






TODO in Channel:

	[] move some orthodox stuff (copy constructor and operator=) to private  
	   // Real-world IRC channel objects are usually non-copyable ‚Äî prevents accidental copies  

	REPLACE:  
		[] std::vector<Client*> _members;  
		   => std::map<int, Client*> _members;  
		   // Faster lookup by fd, avoids duplicates, standard for server-side user tracking  

		[] std::vector<Client*> _operators;  
		   => std::set<int> _operators;  
		   // Store only fds of operators, no need to store full Client* here  

		[] removeUser(Client* client)  
		   => void removeUser(int fd);  
		   // Server works with fd ‚Äî avoid searching by pointer  

		[] void sendToChannelExcept(const std::string &message, Client *sender) const;  
		   => void broadcast(const std::string &message, int excludeFd) const;  
		   // Simpler to exclude sender by fd, members stored by fd  

	CHANGE:  
		[] Remove either _key or _password ‚Äî only one field for channel key should exist (suggest: keep _key)  
		   // Subject requires "key" for +k mode ‚Äî no need for both  

	ADD:  
		[] std::set<int> _invited;  
		   // Store fds of invited clients for invite-only channels (+i)  

		[] void inviteUser(int fd);  
		   // Add client to invited list  

		[] bool isInvited(int fd) const;  
		   // Check if client is invited  

		[] bool _inviteOnly;      // +i ‚Äî invite-only channel  
		[] bool _topicLocked;     // +t ‚Äî only operators can change topic  
		[] bool _hasKey;          // +k ‚Äî key/password is set  
		[] bool _hasUserLimit;    // +l ‚Äî user limit active  

		[] bool isInviteOnly() const;  
		[] bool isTopicLocked() const;  
		[] bool hasKey() const;  
		[] bool hasUserLimit() const;  
		   // Simple getters to check channel modes ‚Äî server uses these  
//____________________________________________________________________________//
